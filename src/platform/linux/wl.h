#ifndef _AMW_wayland_h_
#define _AMW_wayland_h_

#include "../hadal.h"

#include <wayland-client.h>
#include <xkbcommon/xkbcommon.h>
#include <xkbcommon/xkbcommon-compose.h>

/* generated by: wayland-protocols */
#include <xdg-shell-protocol.h>
#include <viewporter-protocol.h>

typedef struct OutputWayland {
    struct wl_output *output;
    u32 name;
    i32 current_mode;
    i32 xpos, ypos, scale;
} OutputWayland;

typedef struct WindowWayland {
    struct wl_surface *surface;

    char   *app_id;
    u32     width, height;
    u32     fb_width, fb_height;

    struct {
        struct xdg_surface                 *surface;
        struct xdg_toplevel                *toplevel;
    } xdg;

    struct {
        u32 width, height, flags;
    } pending;
} WindowWayland;

typedef struct HadopelagicWayland {
    const char *tag;

    struct wl_display       *display;
    struct wl_registry      *registry;
    struct wl_shm           *shm;
    struct wl_seat          *seat;
    struct wl_compositor    *compositor;
    struct wl_subcompositor *subcompositor;
    struct xdg_wm_base      *wm_base;

    struct wp_viewporter    *viewporter;

    u32 serial;
} HadopelagicWayland;

extern bool hadal_wayland_connect(void);
extern i32  hadal_wayland_init(void);
extern void hadal_wayland_terminate(void);

extern bool hadal_wayland_create_window(Window *window, u32 width, u32 height);
extern void hadal_wayland_destroy_window(Window *window);
extern void hadal_wayland_get_framebuffer_size(Window *window, u32 *width, u32 *height);

extern void hadal_wayland_show_window(Window *window);
extern void hadal_wayland_hide_window(Window *window);

#ifdef AMW_NATIVE_VULKAN
#include "../../renderer/vulkan/vk.h"

extern bool hadal_wayland_vkPhysicalDevicePresentationSupport(VkPhysicalDevice pd, u32 queue_family);
extern VkResult hadal_wayland_vkCreateSurface(VkInstance instance, Window *window, const VkAllocationCallbacks *allocator, VkSurfaceKHR *surface);
#endif

#endif /* _AMW_wayland_h_ */
